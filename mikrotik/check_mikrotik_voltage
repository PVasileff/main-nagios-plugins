#!/bin/bash
# Plamen Vasilev a.k.a Paco - p.vasileff@gmail.com - 16 Jan 2020
# Based on check_mikrorik_mem from Jakub Zemanek - zemanekj@vspj.cz
# Based on check_mt_volt from Michal Lasisz <michal.lasisz@gmail.com>

PROGNAME=`basename $0`
PROGPATH=`dirname $0`
REVISION=`echo '$Revision: 3.0 $' | sed -e 's/[^0-9.]//g'`

# Exit codes
#STATE_OK=0
#STATE_WARNING=1
#STATE_CRITICAL=2
#STATE_UNKNOWN=3

. $PROGPATH/utils.sh

print_usage() {
    echo -e "Usage: $PROGNAME -H <ip_address> [-w <low voltage warning>] [-c <low voltage critical>] [-u <high voltage warning>] [-v <high voltage critical>] [-C <community>]
[-P <snmp version>] [-U <username>] [-L <secLevel>] [-a <authproto>]
[-x <privproto>] [-A <authpassword>] [-X <privpassword>]"

echo -e "\nThis plugin uses the 'snmpget' command included with the NET-SNMP package.
if you don't have the package installed, you will need to download it from
http://net-snmp.sourceforge.net before you can use this plugin."
}

print_help() {
    echo ""
    echo "This plugin checks Mikrotik voltage in Volts and reports if the voltage is outside specified thresholds."
    echo ""
    print_usage
    echo ""
    support
}

# Default values
# 12 V
#critical=112
#warning=114
#highcritical=135
#highwarning=130
# 24 V
critical=232
warning=234
highcritical=255
highwarning=250
community=""
protocol=" -v 2c -c public"  # Default protocol and community
secname=""
authproto=""
privproto=""
privpasswd=""
authpassword=""
seclevel=""

# Process parameters
while test -n "$1"; do
        case "$1" in
                        --help | -h)
                            print_help
                            exit 0
                            ;;
                        --version | -V)
                            echo "$PROGNAME version $REVISION"
                            exit 0
                            ;;
                        -w)
                            warning=$2
                            shift
                            ;;
                        --warning*)
                            warning="$(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -c)
                            critical=$2
                            shift
                            ;;
                        --critical*)
                            critical="$(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -u)
                            highwarning=$2
                            shift
                            ;;
                        --highwarning*)
                            highwarning="$(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -v)
                            highcritical=$2
                            shift
                            ;;
                        --highcritical*)
                            highcritical="$(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -H)
                            Host="$2"
                            shift
                            ;;
                        --hostname*)
                            Host="$(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -C)
                            community=" -c $2"
                            shift
                            ;;
                        --community*)
                            community=" -c $(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -P)
                            protocol=" -v $2"
                            shift
                            ;;
                        --protocol*)
                            protocol=" -v $(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -U)
                            secname=" -u $2"
                            shift
                            ;;
                        --secname*)
                            secname=" -u $(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -a)
                            authproto=" -a $2"
                            shift
                            ;;
                        --authproto*)
                            authproto=" -a $(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -x)
                            privproto=" -x $2"
                            shift
                            ;;
                        --privproto*)
                            privproto=" -x $(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -A)
                            authpassword=" -A $2"
                            shift
                            ;;
                        --authpassword*)
                            authpassword=" -A $(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -X)
                            privpasswd=" -X $2"
                            shift
                            ;;
                        --privpassword*)
                            privpasswd=" -X $(echo $1 | cut -d "=" -f 2)"
                            ;;
                        -L)
                            seclevel=" -l $2"
                            shift
                            ;;
                        --seclevel*)
                            seclevel=" -l $(echo $1 | cut -d "=" -f 2)"
                            ;;
                        *)
                            echo "Unknown argument: $1"
                            echo "Usage: $PROGNAME --help"
                            exit 3
                            ;;
        esac
        shift
done

# Host is required
if [ -z "$Host" ]; then
    echo "No host specified."
    exit 3
fi

# Retrieve voltage
voltage=$(snmpget $community$authproto$authpassword$privpasswd$protocol$secname$seclevel$privproto -OEqv $Host 1.3.6.1.4.1.14988.1.1.3.8.0)

if [ $? -ne 0 ]; then
    echo "CRITICAL: Unable to retrieve voltage from $Host."
    exit 2
fi

# Check thresholds and include perfdata
if (( $(echo "$voltage < $critical" | bc -l) )); then
    echo "CRITICAL: Voltage is $(awk "BEGIN {printf \"%.1f\", $voltage / 10}") V, below the critical threshold of $(awk "BEGIN {printf \"%.1f\", $critical / 10}") V. | voltage=$(awk "BEGIN {printf \"%.1f\", $voltage / 10}");$(awk "BEGIN {printf \"%.1f\", $warning / 10}");$(awk "BEGIN {printf \"%.1f\", $critical / 10}");$(awk "BEGIN {printf \"%.1f\", $highwarning / 10}");$(awk "BEGIN {printf \"%.1f\", $highcritical / 10}")"
    exit 2
elif (( $(echo "$voltage > $highcritical" | bc -l) )); then
    echo "CRITICAL: Voltage is $(awk "BEGIN {printf \"%.1f\", $voltage / 10}") V, above the high critical threshold of $(awk "BEGIN {printf \"%.1f\", $highcritical / 10}") V. | voltage=$(awk "BEGIN {printf \"%.1f\", $voltage / 10}");$(awk "BEGIN {printf \"%.1f\", $warning / 10}");$(awk "BEGIN {printf \"%.1f\", $critical / 10}");$(awk "BEGIN {printf \"%.1f\", $highwarning / 10}");$(awk "BEGIN {printf \"%.1f\", $highcritical / 10}")"
    exit 2
elif (( $(echo "$voltage < $warning" | bc -l) )); then
    echo "WARNING: Voltage is $(awk "BEGIN {printf \"%.1f\", $voltage / 10}") V, below the warning threshold of $(awk "BEGIN {printf \"%.1f\", $warning / 10}") V. | voltage=$(awk "BEGIN {printf \"%.1f\", $voltage / 10}");$(awk "BEGIN {printf \"%.1f\", $warning / 10}");$(awk "BEGIN {printf \"%.1f\", $critical / 10}");$(awk "BEGIN {printf \"%.1f\", $highwarning / 10}");$(awk "BEGIN {printf \"%.1f\", $highcritical / 10}")"
    exit 1
elif (( $(echo "$voltage > $highwarning" | bc -l) )); then
    echo "WARNING: Voltage is $(awk "BEGIN {printf \"%.1f\", $voltage / 10}") V, above the high warning threshold of $(awk "BEGIN {printf \"%.1f\", $highwarning / 10}") V. | voltage=$(awk "BEGIN {printf \"%.1f\", $voltage / 10}");$(awk "BEGIN {printf \"%.1f\", $warning / 10}");$(awk "BEGIN {printf \"%.1f\", $critical / 10}");$(awk "BEGIN {printf \"%.1f\", $highwarning / 10}");$(awk "BEGIN {printf \"%.1f\", $highcritical / 10}")"
    exit 1
else
    echo "OK: Voltage is $(awk "BEGIN {printf \"%.1f\", $voltage / 10}") V, within safe limits. | voltage=$(awk "BEGIN {printf \"%.1f\", $voltage / 10}");$(awk "BEGIN {printf \"%.1f\", $warning / 10}");$(awk "BEGIN {printf \"%.1f\", $critical / 10}");$(awk "BEGIN {printf \"%.1f\", $highwarning / 10}");$(awk "BEGIN {printf \"%.1f\", $highcritical / 10}")"
    exit 0
fi
